{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","useStyle","makeStyles","theme","@global","body","backgroundColor","palette","common","white","paper","marginTop","spacing","display","flexDirection","alignItems","submit","margin","nameChange","e","setState","name","target","value","phoneChange","phone","emailChange","email","addressChange","address","remarkChange","remark","handleSubmit","result","JSON","stringify","state","preventDefault","classes","react_default","a","createElement","Container","component","maxWidth","CssBaseline","className","onSubmit","TextField","label","type","onChange","variant","required","fullWidth","rows","rowsMax","multiline","Button","color","Typography","dist_modules","bgColor","fgColor","level","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c17aabd9.chunk.js","sourcesContent":["import React from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { QRCode } from \"react-qr-svg\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.state = {\r\n      // name: \"Nama Lengkap\",\r\n      // phone: \"0123456789\",\r\n      // email: \"nama@email.com\",\r\n      // address: \"Alamat\",\r\n      // remark: \"Pertanyaan / catatan untuk pembuat booth\",\r\n      result: \"Isi form untuk generate QR Code\",\r\n    };\r\n    // this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  useStyle = makeStyles(theme => ({\r\n    '@global': {\r\n      body: {\r\n        backgroundColor: theme.palette.common.white,\r\n      },\r\n    },\r\n    paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n    },\r\n  }));\r\n\r\n  nameChange = e => this.setState({ name: e.target.value });\r\n  phoneChange = e => this.setState({ phone: e.target.value });\r\n  emailChange = e => this.setState({ email: e.target.value });\r\n  addressChange = e => this.setState({ address: e.target.value });\r\n  remarkChange = e => this.setState({ remark: e.target.value });\r\n  handleSubmit = e => {\r\n    this.setState({\r\n      result: JSON.stringify(\r\n        {\r\n          name: this.state.name,\r\n          phone: this.state.phone,\r\n          email: this.state.email,\r\n          address: this.state.address,\r\n          remark: this.state.remark,\r\n        }\r\n      )\r\n    });\r\n    e.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    const classes = this.useStyle;\r\n    const {\r\n      state,\r\n      nameChange,\r\n      phoneChange,\r\n      emailChange,\r\n      addressChange,\r\n      remarkChange,\r\n      handleSubmit,\r\n      useStyle\r\n    } = this;\r\n    return (\r\n      <Container component=\"main\" maxWidth=\"sm\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <form onSubmit={handleSubmit}>\r\n            <TextField label=\"Nama Lengkap\" type=\"text\" value={state.name} onChange={nameChange} variant=\"outlined\" margin=\"normal\" required fullWidth />\r\n            <TextField label=\"Nomor Handphone\" type=\"number\" value={state.phone} onChange={phoneChange} variant=\"outlined\" margin=\"normal\" required fullWidth />\r\n            <TextField label=\"Email\" type=\"email\" value={state.email} onChange={emailChange} variant=\"outlined\" margin=\"normal\" required fullWidth />\r\n            <TextField label=\"Alamat\" type=\"address\" value={state.address} onChange={addressChange} rows=\"3\" rowsMax=\"3\" variant=\"outlined\" margin=\"normal\" required fullWidth multiline />\r\n            <TextField label=\"Pertanyaan / Catatan\" type=\"remark\" value={state.remark} onChange={remarkChange} rows=\"3\" rowsMax=\"3\" variant=\"outlined\" margin=\"normal\" fullWidth multiline />\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\" className={useStyle.submit} fullWidth>GENERATE</Button>\r\n          </form>\r\n          <Typography component=\"h1\" variant=\"h5\">Hasil:</Typography>\r\n          <QRCode\r\n            bgColor=\"#FFFFFF\"\r\n            fgColor=\"#000000\"\r\n            level=\"Q\"\r\n            // style={{ width: 256 }}\r\n            value={state.result}\r\n          />\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}